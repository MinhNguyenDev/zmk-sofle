#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>
#include "leader.dtsi"
#include "helpers.h"

// &lt {
//     flavor = "hold-preferred";
// };

/ {
    shortcuts {

        MACRO(mc_lalt, &macro_tap &kp LALT)
        TAPHOLD_TP(th_leader_alt, &leader, &mc_lalt)

   };
};

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_copy {
            timeout-ms = <50>;
            key-positions = <28 29>; // S and D
            bindings = <&kp LC(C)>; // Sends Ctrl+S
        };
        combo_paste {
            timeout-ms = <50>;
            key-positions = <29 30>; // D and F
            bindings = <&kp LC(V)>; // Sends Ctrl+V
        };
        combo_undo {
            key-positions = <40 41>; // Z + X
            bindings = <&kp LC(Z)>;
        };

        combo_cut {
            key-positions = <41 42>; // X + C
            bindings = <&kp LC(X)>;
        };

        combo_save {
            key-positions = <42 43>; // C + V
            bindings = <&kp LC(S)>;
        };

        combo_select_all {
            key-positions = <14 15>; // Q + W
            bindings = <&kp LC(A)>;
        };

        combo_select_line {
            key-positions = <30 31>; // F + G
            bindings = <&select_line>;
        };

        combo_select_word {
            key-positions = <43 44>; // V + B
            bindings = <&select_word>;
        };

        combo_replace {
            key-positions = <33 34>; // J + H
            bindings = <&kp LC(H)>;
        };

        combo_find {
            key-positions = <34 35>; // J + K
            bindings = <&kp LC(F)>;
        };

        combo_switch_tab {
            key-positions = <34 36>; // J + L
            bindings = <&kp LC(TAB)>;
        };

        combo_ctrl_shift_space {
            key-positions = <35 36>; // K + L
            bindings = <&kp LC(LS(SPACE))>;
        };

        combo_altTab {
            key-positions = <47 49>; // M + .
            bindings = <&kp LA(TAB)>;
        };

        combo_escape {
            key-positions = <41 43>; // X + V
            bindings = <&kp ESC>;
        };
        
        combo_arrow_right {
            key-positions = <48 49>; // , + .
            bindings = <&macro_arrow_right>;
        };

        combo_arrow_left {
            key-positions = <47 48>; // M + ,
            bindings = <&macro_arrow_left>;
        };

        combo_window_1 {
            key-positions = <30 17>; // F + R
            bindings = <&kp LG(N1)>;
        };
        combo_window_2 {
            key-positions = <31 18>; // G + T
            bindings = <&kp LG(N2)>;
        };
        combo_window_3 {
            key-positions = <33 20>; // H + Y
            bindings = <&kp LG(N3)>;
        }; 
        combo_window_4 {
            key-positions = <34 21>; // U + J 
            bindings = <&kp LG(N4)>;
        };                
    };
};

/ {
    macros {
        zed_em_kay: zed_em_kay {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;            
            bindings
                = <&kp Z &kp M &kp K>
                , <&kp SPACE>
                , <&kp R &kp O &kp C &kp K &kp S>
                ;
        };
        select_line: select_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings = <&kp HOME>, <&kp LS(END)>;
        };
        select_word: select_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings = <&kp LC(RIGHT_ARROW)>, <&kp LC(LS(LEFT_ARROW))>;
        };        
        minh_email: minh_email {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <5>;
            tap-ms = <5>;
            bindings = 
                <&kp M &kp I &kp N &kp H &kp N &kp G &kp U &kp Y &kp E &kp N>
                , <&kp AT>
                , <&kp S &kp I &kp M &kp P &kp O &kp L &kp O &kp G &kp Y>
                , <&kp DOT>
                , <&kp C &kp O &kp M>
                , <&kp DOT>
                , <&kp A &kp U>
            ;
        };
        select_sql: select_sql {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings = 
                <&kp LS(S) &kp E &kp L &kp E &kp C &kp T>
                , <&kp SPACE>
                , <&kp T &kp O &kp P>
                , <&kp SPACE>
                , <&kp N2 &kp N0 &kp N0>
                , <&kp SPACE>
                , <&kp STAR>
                , <&kp SPACE>
                , <&kp LS(F) &kp R &kp O &kp M>
            ;
        };  
        macro_arrow_right: macro_arrow_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;            
            bindings = <&kp EQUAL>, <&kp LS(DOT)>;
        };
        macro_arrow_left: macro_arrow_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;            
            bindings = <&kp LS(COMMA)>, <&kp EQUAL>;
        };
        macro_channelId: macro_channelId {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <1>;
            bindings = <&kp LS(C) &kp H &kp A &kp N &kp N &kp E &kp L &kp LS(I) &kp D>;
        };
        macro_applicationId: macro_applicationId {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <1>;
            bindings = <&kp LS(A) &kp P &kp P &kp L &kp I &kp C &kp A &kp T &kp I &kp O &kp N &kp LS(I) &kp D>;
        };
        macro_TAMA5: macro_TAMA5 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <1>;
            bindings = <&kp LBKT &kp LS(T) &kp LS(A) &kp LS(M) &kp LS(A) &kp N5 &kp MINUS &kp RBKT &kp LEFT_ARROW>;
        };
        macro_patch: macro_patch {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <1>;
            bindings = <&kp LBKT &kp P &kp A &kp T &kp C &kp H &kp RBKT>;
        };
        macro_minor: macro_minor {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <1>;
            bindings = <&kp LBKT &kp M &kp I &kp N &kp O &kp R &kp RBKT>;
        };
        macro_foreach: macro_foreach {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <1>;
            bindings =
                <&kp F &kp O &kp R &kp E &kp A &kp C &kp H>
                , <&kp SPACE>
                , <&kp LS(N9) &kp V &kp A &kp R &kp SPACE &kp R &kp E &kp C &kp O &kp R  &kp D>
                , <&kp SPACE &kp I &kp N &kp SPACE &kp O &kp B &kp J &kp S &kp LS(N0)>
                , <&kp SPACE>
                , <&kp LBRC &kp RBRC &kp LEFT_ARROW>
            ;
        };
        macro_if_block: macro_if_block {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <1>;
            bindings =
                <&kp I &kp F>
                , <&kp SPACE>
                , <&kp LS(N9) &kp LS(N0)>
                , <&kp SPACE>
                , <&kp LBRC>
                , <&kp ENTER>
                , <&kp ENTER>
                , <&kp RBRC &kp UP_ARROW &kp UP_ARROW &kp HOME &kp RIGHT_ARROW &kp RIGHT_ARROW &kp RIGHT_ARROW &kp RIGHT_ARROW>
            ;
        };        
        macro_nolock: macro_nolock {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <1>;
            bindings = <&kp LS(N9) &kp N &kp O &kp L &kp O &kp C &kp K &kp LS(N0)>;
        };
        macro_string: macro_string {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <1>;
            bindings = <&kp S &kp T &kp R &kp I &kp N &kp G &kp SPACE>;
        };        
        macro_where: macro_where {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <1>;
            bindings = <&kp LS(W) &kp LS(H) &kp LS(E) &kp LS(R) &kp LS(E) &kp SPACE>;
        };
        macro_bugfix: macro_bugfix {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <1>;
            bindings = <&kp B &kp U &kp G &kp F &kp I &kp X>;
        };
        macro_public: macro_public {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <1>;
            bindings = <&kp P &kp U &kp B &kp L &kp I &kp C>;
        };
        macro_private: macro_private {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <1>;
            bindings = <&kp P &kp R &kp I &kp V &kp A &kp T &kp E>;
        };
        macro_feature: macro_feature {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <1>;
            bindings = <&kp F &kp E &kp A &kp T &kp U &kp R &kp E>;
        };
        macro_var: macro_var {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <1>;
            bindings = <&kp V &kp A &kp R &kp SPACE &kp SPACE &kp EQUAL &kp SPACE &kp SEMI &kp LEFT_ARROW &kp LEFT_ARROW &kp LEFT_ARROW &kp LEFT_ARROW>;
        };
        macro_phone: macro_phone {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <1>;
            bindings = <&kp N0 &kp N4 &kp N0 &kp N0 &kp N0 &kp N0 &kp N0 &kp N0 &kp N0 &kp N0>;
        };
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
        tap-ms = <100>;
    };
    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&mt ESC GRAVE           &kp F1     &kp F2        &kp F3        &kp F4  &kp F5       &kp UP_ARROW            &kp F6     &kp F9     &kp F10     &kp F11         &kp F12     &lt 2 DELETE
&mt LEFT_GUI TAB        &kp Q      &kp W         &kp E         &kp R   &kp T        &kp DOWN_ARROW          &kp Y      &kp U      &kp I      &kp O            &kp P       &kp MINUS
&mt LSHFT BSPC          &kp A      &kp S         &kp D         &kp F   &kp G        &kp LEFT_ARROW          &kp H      &kp J      &kp K      &kp L            &mt LSHFT SEMI     &kp APOS
&kp LCTRL               &mt LSHFT Z      &kp X         &kp C         &kp V   &kp B        &kp RIGHT_ARROW         &kp N      &kp M      &mt UP_ARROW COMMA  &kp DOT          &kp FSLH    &kp BSLH
&kp C_MUTE  &kp LCTRL  &kp LALT  &leader &lt 3 ENTER   &mo 1              &kp ENTER               &kp TAB  &lt 3 SPACE  &kp LEFT_ARROW      &kp DOWN_ARROW  &kp RIGHT_ARROW
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "LAYER0";
        };

        layer_1 {
            bindings = <
&kp ESC     &kp F1           &kp F2          &kp F3           &kp F4           &kp F5             &mmv MOVE_UP     &kp F6           &kp F7           &kp F8      &kp F9     &kp LS(F12)           &kp PSCRN
&minh_email      &trans           &kp LC(S)       &kp LS(LC(F))    &kp LC(LA(F))    &kp LS(LC(T))      &mmv MOVE_DOWN   &kp END    &kp LC(LEFT_ARROW)          &kp UP_ARROW      &kp LC(RIGHT_ARROW)   &kp PG_UP             &kp ENTER
&trans      &kp LC(A)        &select_sql          &kp LC(C)        &kp LC(V)        &kp DELETE         &mmv MOVE_LEFT   &kp HOME        &kp LEFT_ARROW              &kp DOWN_ARROW    &kp RIGHT_ARROW       &kp PG_DN  &trans
&trans      &kp LC(Z)        &kp LC(X)       &trans           &kp LSHFT        &kp LCTRL          &mmv MOVE_RIGHT  &kp LS(END)     &select_line  &trans   &trans            &trans             &kp LC(PAUSE_BREAK)
&kp C_MUTE  &trans           &trans          &trans           &trans           &trans             &mkp LCLK        &kp DELETE           &trans           &trans      &trans     &kp INSERT
            >;

            display-name = "layer1";
            sensor-bindings = <&scroll_encoder>;
        };

        layer_2 {
            bindings = <
&kp ESC  &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &mmv MOVE_UP    &trans   &trans &trans   &trans    &trans      &trans
&studio_unlock      &bt BT_CLR    &bt BT_CLR_ALL  &trans        &trans        &trans          &mmv MOVE_DOWN   &trans  &trans  &trans    &trans      &trans    &out OUT_USB
&studio_unlock     &out OUT_USB  &out OUT_BLE    &trans        &trans        &trans          &mmv MOVE_LEFT   &trans  &trans  &trans      &trans     &trans    &out OUT_USB
&studio_unlock     &sys_reset    &trans          &bootloader   &trans        &bootloader          &mmv MOVE_RIGHT  &bootloader  &trans  &sys_reset  &soft_off  &bootloader  &out OUT_USB
&trans     &trans        &trans          &trans        &rgb_ug RGB_OFF        &rgb_ug RGB_ON          &mkp LCLK        &rgb_ug RGB_EFR  &trans  &trans      &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_3 {
            bindings = <
&kp ESC    &trans     &trans     &trans     &trans     &trans                   &trans                          &kp F6            &kp F7             &kp LS(N9)         &kp LS(N0)          &trans            &kp PSCRN
&minh_email   &kp LS(N4)     &kp N1     &kp N2     &kp N3      &kp N0                &trans                        &kp STAR         &kp LS(N1)          &kp LBKT           &kp RBKT              &kp LS(N2)        &trans
&trans   &kp DOT        &kp N4     &kp N5     &kp N6      &kp LS(BSLH)          &trans                        &kp LS(N7)       &kp LS(MINUS)       &kp LS(N9)       &kp LS(N0)        &kp LS(N5)         &kp LS(SQT)
&trans   &kp FSLH       &kp N7     &kp N8     &kp N9      &kp PLUS              &trans                       &kp LS(N3)       &kp EQUAL           &kp LBRC       &kp RBRC         &kp LS(N6)         &kp LC(PAUSE_BREAK)
&trans    &trans        &trans     &trans     &trans     &kp DELETE             &trans                             &kp DELETE            &trans      &trans         &trans         &kp INSERT
            >;

            display-name = "symbols";
        };
    };
};


