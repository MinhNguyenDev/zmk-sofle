#undef ZMK_LEADER_SEQUENCE
#define ZMK_LEADER_SEQUENCE(name, leader_bindings, leader_sequence) \
    / { \
        behaviors { \
            leader: leader { \
                compatible = "zmk,behavior-leader-key"; \
                #binding-cells = <0>; \
                ignore-keys = <LSHFT RSHFT>; \
                leader_sequence_ ## name { \
                    bindings = <leader_bindings>; \
                    sequence = <leader_sequence>; \
                }; \
            }; \
        }; \
    };


ZMK_LEADER_SEQUENCE(channelId,  &macro_channelId,     C SPACE)  // ChannelId
ZMK_LEADER_SEQUENCE(applicationId,  &macro_applicationId,     A SPACE)  // ApplicationId
ZMK_LEADER_SEQUENCE(select_sql, &select_sql,        S E SPACE)  // select sql
ZMK_LEADER_SEQUENCE(string,     &macro_string,        S SPACE)  // string
ZMK_LEADER_SEQUENCE(patch,      &macro_patch,       P SPACE)  // patch
ZMK_LEADER_SEQUENCE(public,      &macro_public,       P U SPACE)  // public
ZMK_LEADER_SEQUENCE(private,      &macro_private,       P R SPACE)  // private
ZMK_LEADER_SEQUENCE(tama5,      &macro_TAMA5,       T SPACE)  // TAMA5
ZMK_LEADER_SEQUENCE(minor,      &macro_minor,       M SPACE)  // minor
ZMK_LEADER_SEQUENCE(feature,    &macro_feature,     F SPACE)  // feature
ZMK_LEADER_SEQUENCE(foreach,    &macro_foreach,     F E SPACE)  // for each
ZMK_LEADER_SEQUENCE(ifblock,    &macro_if_block,    I SPACE)  // if
ZMK_LEADER_SEQUENCE(nolock,    &macro_nolock,      N SPACE)  // nolock
ZMK_LEADER_SEQUENCE(where,    &macro_where,        W SPACE)  // where
ZMK_LEADER_SEQUENCE(bugfix,    &macro_bugfix,      B SPACE)  // bugfix
ZMK_LEADER_SEQUENCE(var_assign,    &macro_var,     V SPACE)  // var assign



